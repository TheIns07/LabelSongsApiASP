// <auto-generated />
using System;
using LabelSongsAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LabelSongsAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231018002544_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LabelSongsAPI.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("LabelSongsAPI.Models.Composer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LabelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LabelId");

                    b.ToTable("Composers");
                });

            modelBuilder.Entity("LabelSongsAPI.Models.Label", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Label");
                });

            modelBuilder.Entity("LabelSongsAPI.Models.Relations.SongCategory", b =>
                {
                    b.Property<int>("IdSong")
                        .HasColumnType("int");

                    b.Property<int>("IdCategory")
                        .HasColumnType("int");

                    b.HasKey("IdSong", "IdCategory");

                    b.HasIndex("IdCategory");

                    b.ToTable("SongCategories");
                });

            modelBuilder.Entity("LabelSongsAPI.Models.Relations.SongComposer", b =>
                {
                    b.Property<int>("IdSong")
                        .HasColumnType("int");

                    b.Property<int>("IdComposer")
                        .HasColumnType("int");

                    b.HasKey("IdSong", "IdComposer");

                    b.HasIndex("IdComposer");

                    b.ToTable("SongComposers");
                });

            modelBuilder.Entity("LabelSongsAPI.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ReviewContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("int");

                    b.Property<int>("SongID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("SongID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("LabelSongsAPI.Models.Reviewer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Reviewers");
                });

            modelBuilder.Entity("LabelSongsAPI.Models.Song", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("LaunchTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("LabelSongsAPI.Models.Composer", b =>
                {
                    b.HasOne("LabelSongsAPI.Models.Label", "Label")
                        .WithMany("Composers")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Label");
                });

            modelBuilder.Entity("LabelSongsAPI.Models.Relations.SongCategory", b =>
                {
                    b.HasOne("LabelSongsAPI.Models.Song", "Song")
                        .WithMany("SongCategories")
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabelSongsAPI.Models.Category", "Category")
                        .WithMany("SongCategories")
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("LabelSongsAPI.Models.Relations.SongComposer", b =>
                {
                    b.HasOne("LabelSongsAPI.Models.Song", "Song")
                        .WithMany("SongComposers")
                        .HasForeignKey("IdComposer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabelSongsAPI.Models.Composer", "Composer")
                        .WithMany("SongComposers")
                        .HasForeignKey("IdComposer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Composer");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("LabelSongsAPI.Models.Review", b =>
                {
                    b.HasOne("LabelSongsAPI.Models.Reviewer", "Reviewer")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabelSongsAPI.Models.Song", "Song")
                        .WithMany("Reviews")
                        .HasForeignKey("SongID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reviewer");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("LabelSongsAPI.Models.Category", b =>
                {
                    b.Navigation("SongCategories");
                });

            modelBuilder.Entity("LabelSongsAPI.Models.Composer", b =>
                {
                    b.Navigation("SongComposers");
                });

            modelBuilder.Entity("LabelSongsAPI.Models.Label", b =>
                {
                    b.Navigation("Composers");
                });

            modelBuilder.Entity("LabelSongsAPI.Models.Reviewer", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("LabelSongsAPI.Models.Song", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("SongCategories");

                    b.Navigation("SongComposers");
                });
#pragma warning restore 612, 618
        }
    }
}
